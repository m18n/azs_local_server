cmake_minimum_required(VERSION 3.1)
project(azs_local_server)
IF (WIN32)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/site DESTINATION ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/library/windows/mysqlconn/${CMAKE_BUILD_TYPE}/lib64/mysqlcppconn-9-vs14.dll DESTINATION ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/library/windows/mysqlconn/${CMAKE_BUILD_TYPE}/lib64/libssl-1_1-x64.dll DESTINATION ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/library/windows/mysqlconn/${CMAKE_BUILD_TYPE}/lib64/libcrypto-1_1-x64.dll DESTINATION ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/library/windows/openssl/libcrypto-3-x64.dll DESTINATION ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/library/windows/openssl/libssl-3-x64.dll DESTINATION ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
    include_directories(library/windows/mysqlconn/include/jdbc)
    include_directories(library/windows/openssl/include)
    link_directories(library/windows)
    link_directories(library/windows/mysqlconn/${CMAKE_BUILD_TYPE}/lib64)
ELSE()
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/site DESTINATION ${CMAKE_BINARY_DIR}/bin)
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/DockerfileLinux DESTINATION ${CMAKE_BINARY_DIR})
    file(RENAME ${CMAKE_BINARY_DIR}/DockerfileLinux ${CMAKE_BINARY_DIR}/Dockerfile)
    find_package(OpenSSL REQUIRED)
    include_directories(library/linux/mysqlconn/include/jdbc)
    link_directories(library/linux/mysqlconn/lib64)
ENDIF()
include_directories(library/jwt)
include_directories(include)
include_directories(library/sqlite)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
add_subdirectory(library/Crow)
link_directories(library/Crow/include)
add_executable(${PROJECT_NAME} main.cpp src/controller.cpp src/model.cpp src/view.cpp src/local_data.cpp src/azs.cpp library/sqlite/sqlite3.c library/sqlite/shell.c)
IF (WIN32)
target_link_libraries(${PROJECT_NAME} Crow vs14/libssl vs14/libcrypto vs14/mysqlcppconn openssl/libssl openssl/libcrypto)
ELSE()
target_link_libraries(${PROJECT_NAME} Crow OpenSSL::SSL OpenSSL::Crypto libmysqlcppconn8.so)
ENDIF()